# import sys
import logger

# def error__message(error_message, error_detail:sys):
    
#     _,_,exc_tb = error_detail.exc_info()
    
#     file_name = exc_tb.tb_frame.f_code.co_filename
#     error_message  = f"Error Message in python file: {file_name} at line number: {exc_tb.tb_lineno} is {error_message}"

# class CustomException(Exception):
    
#     # Constructor or Initializer which is used to create instance variables
#     def __init__(self, message , error_detail:sys):
#         super().__init__(message)
#         self.message = error__message(message, error_detail = error_detail)        
    
#     # __str__ is to print() the value 
#     def __str__(self):
#         return self.message
    

# if __name__ == "__main__":
    
#     try:
#         a = 1 / 0
#     except Exception as e:
#         logging.info("Divide by zero error")
        
#         raise CustomException(e,sys)
import sys
import logging

def error_message_detail(error,error_detail:sys):
    _,_,exc_tb=error_detail.exc_info()
    file_name=exc_tb.tb_frame.f_code.co_filename
    error_message="Error occured in python script name [{0}] line number [{1}] error message[{2}]".format(
     file_name,exc_tb.tb_lineno,str(error))

    return error_message

    

class CustomException(Exception):
    def __init__(self,error_message,error_detail:sys):
        super().__init__(error_message)
        self.error_message=error_message_detail(error_message,error_detail=error_detail)
    
    def __str__(self):
        return self.error_message
    

if __name__ == "__main__":
    
    try:
        a = 1 / 0
    except Exception as e:
        logging.info("Divide by zero error")
        
        raise CustomException(e,sys)

            
""" def error_message(error_message, error_detail:sys):

This is a function definition named error_message.
It takes two parameters: error_message (a string) and error_detail (expected to be an exception instance).
Inside the function:
It retrieves information about the current exception using error_detail.exc_info().
Extracts the filename and line number where the exception occurred from the traceback.
Constructs a new error message that includes the filename, line number, and the provided error_message.
class CustomException(Exception):

This is the definition of a custom exception class named CustomException, which inherits from the built-in Exception class.
def __init__(self, message, error_detail: sys):

This is the constructor method of the CustomException class.
It takes two parameters: message (a string) and error_detail (expected to be an exception instance).
It calls the constructor of the parent class (Exception) using super().__init__(message) to set the error message for the exception.
It also assigns the result of calling the error_message function (defined earlier) to the self.message attribute. This result is a string that contains information about the error, including the filename and line number where the exception occurred.
def __str__(self):

This is a special method called __str__, which is used to define a string representation of the exception.
It returns the self.message attribute, which contains the custom error message generated by the error_message function."""